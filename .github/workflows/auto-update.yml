name: AUTO-UPDATE

on: [push, pull_request, workflow_dispatch]

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch latest Node.js versions
        run: |
          curl -s https://nodejs.org/dist/index.json > node_versions.json
          echo "Fetched latest Node.js versions."

      - name: Check for updates
        id: check-updates
        run: |
          get_latest_version() {
              local major_version=$1
              local base_image=$2
              local runtime_type=$3  # jre or jdk

              response=$(curl -s -H "Accept: application/json" \
                  "https://hub.docker.com/v2/repositories/library/eclipse-temurin/tags?page_size=100")

              version=$(echo "$response" | jq -r '.results[] |
                  select(.name | startswith("'$major_version'.") and
                        contains("-'$runtime_type'-'$base_image'")) |
                  .name' | sort -V | tail -n 1)

              echo "$version"
          }

          # Read the matrix file
          matrix_file="image-matrix.json"
          matrix_content=$(cat "$matrix_file")

          export UPDATE_NEEDED=false
          temp_file=$(mktemp)

          # Process each entry in the matrix
          while IFS= read -r entry; do
              major=$(echo "$entry" | jq -r '.majorVersion')
              base=$(echo "$entry" | jq -r '.baseImage')
              type=$(echo "$entry" | jq -r '.runtimeType')
              current_version=$(echo "$entry" | jq -r '.runtimeVersion')

              latest_version=$(get_latest_version "$major" "$base" "$type")

              if [ "$current_version" != "$latest_version" ]; then
                  echo "Update needed for $major $base $type:"
                  echo "  Current: $current_version"
                  echo "  Latest:  $latest_version"
                  UPDATE_NEEDED=true
                  echo "$entry" | jq --arg ver "$latest_version" '.runtimeVersion = $ver' >> "$temp_file"
              else
                  echo "$entry" >> "$temp_file"
              fi
          done < <(echo "$matrix_content" | jq -c '.[]')

          # Output updated matrix if needed
          if [ "$UPDATE_NEEDED" = true ]; then
              echo "Updates are needed"
              echo "update_needed=true" >> $GITHUB_ENV
              jq -s '.' "$temp_file"
          else
              echo "All versions are up to date"
              echo "update_needed=false" >> $GITHUB_ENV
          fi
